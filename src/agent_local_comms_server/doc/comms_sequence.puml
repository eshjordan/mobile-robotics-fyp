@startuml

participant "Robot[N] Server"
participant "Robot[N] Client"
participant "Local Comms Manager"
participant "Robot[N+1] Client"
participant "Robot[N+1] Server"

"Local Comms Manager" -> "Local Comms Manager" : Listen

...

"Robot[N] Server" -> "Robot[N] Server" : Listen
"Robot[N] Client" -> "Local Comms Manager" : Connect
activate "Local Comms Manager"

par Runs continously on a timer
loop
"Robot[N] Client" --> "Local Comms Manager": Heartbeat { (ID(N), Host(N), Port(N)) }
"Local Comms Manager" --> "Robot[N] Client": Response {}
end
end

...

"Robot[N+1] Server" <- "Robot[N+1] Server" : Listen
"Robot[N+1] Client" -> "Local Comms Manager" : Connect
activate "Local Comms Manager"

par Runs continously on a timer
loop
"Robot[N+1] Client" --> "Local Comms Manager": Heartbeat { (ID(N+1), Host(N+1), Port(N+1)) }
"Local Comms Manager" --> "Robot[N+1] Client": Response {}
end
end

...

note right of "Robot[N+1] Client"
Robot[N+1] may spawn multiple
clients to connect to multiple
robots, as long as their IDs
are less than N+1.
end note

loop
alt Robot[N+1] sees Robot[N] is within comms range
"Robot[N+1] Client" --> "Local Comms Manager": Heartbeat { (ID(N+1), Host(N+1), Port(N+1)) }
"Local Comms Manager" --> "Robot[N+1] Client": Response { (ID(N), Host(N), Port(N), Dist(N+1, N)), (...) }
par
"Robot[N+1] Client" -> "Robot[N] Server": Connect
activate "Robot[N] Server"
loop
"Robot[N+1] Client" --> "Robot[N] Server": Knowledge {...}
"Robot[N] Server" --> "Robot[N+1] Client": Knowledge {...}
end
end
...Robot[N+1] sees Robot[N] go out of comms range...

"Robot[N+1] Client" --> "Local Comms Manager": Heartbeat { (ID(N+1), Host(N+1), Port(N+1)) }
"Local Comms Manager" --> "Robot[N+1] Client": Response {}
"Robot[N+1] Client" -> "Robot[N] Server": Close
deactivate "Robot[N] Server"

else Robot[N+1] sees Robot[N] is out of comms range
"Robot[N+1] Client" --> "Local Comms Manager": Heartbeat { (ID(N+1), Host(N+1), Port(N+1)) }
"Local Comms Manager" --> "Robot[N+1] Client": Response {}
end
end

@enduml
